线程池做的工作主要是控制运行的线程的数量,处理过程中将任务放入队列,然后在线程创建后启动这些任务
如果线程数量超过了最大数量,超出的数量就会排队等候,等其他线程还行完毕后,再从队列中取出任务来执行

主要特点:线程复用,控制最大并发数,管理线程

1. 降低资源消耗。通过重复利用已经创建的线程降低线程创建和销毁的消耗
2. 提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即被执行
3. 提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控

Executor 接口，Executors 工具类
1. Executors.newSingleThreadExecutor(); 只有一个线程在处理
2. Executors.newFixedThreadPool(3);     指定固定的线程
3. Executors.newCachedThreadPool();     可以扩容的线程

线程池 = ThreadPoolExecutor + BlockQueue
  return new ThreadPoolExecutor(nThreads, nThreads,
                                      0L, TimeUnit.MILLISECONDS,
                                      new LinkedBlockingQueue<Runnable>());
  return new FinalizableDelegatedExecutorService
              (new ThreadPoolExecutor(1, 1,
                                      0L, TimeUnit.MILLISECONDS,
                                      new LinkedBlockingQueue<Runnable>()));
  return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                        60L, TimeUnit.SECONDS,
                                        new SynchronousQueue<Runnable>());
ThreadPoolExecutor七个参数:
    int corePoolSize,                   线程池中的常驻核心线程
    int maximumPoolSize,                线程池能够容纳同时执行的最大线程数，此值必须大于1
    long keepAliveTime,                 多余空闲线程的存活时间
    TimeUnit unit,                      keepAliveTime的单位
    BlockingQueue<Runnable> workQueue,  任务队列，被提交时尚未被提交的任务
    ThreadFactory threadFactory,        表示生成线程池中工作线程的线程工厂，用于创建线程。一般默认
    RejectedExecutionHandler handler    拒绝策略，表示队列满了，并且工作线程大于等于线程池的最大线程数
Executors的三个方法都不可以用，必须使用ThreadPoolExecutor创建

如何配置线程池
CPU密集型：CPU核数 + 1
IO密集型：CPU核数 * 2，

